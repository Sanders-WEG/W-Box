#!/bin/bash

load_game() {
if ps aux | grep -v grep | grep -q "wine"
then
exit
else
rm -rf ~/.cache/*
function stop-all {
	pkill -f "app_process / com.termux.x11"
	rm -rf $PREFIX/tmp/pulse-*
	pulseaudio -k &>/dev/null
	unset PULSE_SERVER
	pkill pulseaudio
	rm -rf $PREFIX/tmp/.virgl_test &>/dev/null
	pkill virgl
	rm -rf $PREFIX/tmp/.virgl_test &>/dev/null
}
stop-all
BASE_DIR=$(cat "$PREFIX/bin/widget/directory")
hud="$PREFIX/glibc/opt/conf/hud.conf"
hom_game="$HOME/.shortcuts/${GAME%.lnk}"
pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1
termux-x11 :0 &>/dev/null &
if [ "$InBr_eng" = "Enable" ]; then
am start -n com.catfixture.inputbridge/com.catfixture.inputbridge.ui.activity.main.MainActivity &>/dev/null
am start --user 0 com.termux.x11/.MainActivity &>/dev/null
else
am start --user 0 com.termux.x11/.MainActivity &>/dev/null
sleep 0.2
am start --user 0 com.termux.x11/.MainActivity &>/dev/null
fi
file_path="$PREFIX/glibc/opt/scripts/mobox_menu"
    value=$(grep 'Mobox' "$file_path" | sed -E 's/.*Mobox([^"]*).*/\1/')
if [ "$BOX_VERS" == "X86" ]; then
    if [ "$OpenGL_86_eng" == "Enable" ]; then
        export LIBGL_DRI3=0
    else
        export LIBGL_DRI3=1
    fi
DXVK_FILE_86="$BASE_DIR/drivers/render/$DXVK_86"
TURNIP_FILE_86="$BASE_DIR/drivers/driver_x86/$TURNIP_86"
BOX_FILE_86="$BASE_DIR/box/$BOX_86"
if [ ! -f "$TURNIP_FILE_86" ]; then
turnip_n_86="Не найден         ${TURNIP_86%.WEG}"
else
turnip_n_86="Успешно           ${TURNIP_86%.WEG}"
fi
if [ ! -f "$DXVK_FILE_86" ]; then
dxvk_n_86="Не найден         ${DXVK_86%.WEG}"
else
dxvk_n_86="Успешно           ${DXVK_86%.WEG}"
fi
if [ ! -f "$BOX_FILE_86" ]; then
box_n_86="Не найден         ${BOX_86%.WEG}"
else
box_n_86="Успешно           ${BOX_86%.WEG}"
fi
if [ -f "$TURNIP_FILE_86" ]; then
turnip_86="Driver версия:    ${TURNIP_86%.WEG}"
elif [ ! -f "$TURNIP_FILE_86" ]; then
    if [[ "$TURNIP_86" == turnip*.WEG ]]; then
turnip_86="Driver системный: turnip-v4"
    elif [[ "$TURNIP_86" == virgl*.WEG ]]; then
turnip_86="Driver системный: virgl-mesa-18"
    fi
fi
if [ -f "$DXVK_FILE_86" ]; then
dxvk_86="Render версия:    ${DXVK_86%.WEG}"
elif [ ! -f "$DXVK_FILE_86" ]; then
    if [[ "$DXVK_86" == dxvk*.WEG ]]; then
dxvk_86="Render системный: dxvk-async-1.10.3"
    elif [[ "$DXVK_86" == wined*.WEG ]]; then
dxvk_86="Render системный: wined3d-8.0.2"
    fi
fi
if [ -f "$BOX_FILE_86" ]; then
   box_86="Box    версия:    ${BOX_86%.WEG}"
elif [ ! -f "$BOX_FILE_86" ]; then
box_86="Box    системный: box86.nov10"
fi
version_86="Mobox  версия:               $MOBOX_86"
limit_DX="Лимит DirectX:               $DX_VER_86"
resolution="Разрешение экрана:           $RESOLUTION_86"
strech="Изображение по ширине экрана $STRETCH_86"
cores="Активные ядра:               $PRIM_COR_86"
limit_fps="Лимит FPS:                   $FPS_LIM_86"
dri_3="DRI 3:                       $DRI3_86"
servic="Автозапуск Services.exe:     $SERVICES_86"
dialog --no-shadow \
--title "Запуск ${GAME%.lnk}" --infobox "\n
Настройки игры ${GAME%.lnk}\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_n_86\n
$dxvk_n_86\n
$box_n_86\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_86\n
$dxvk_86\n
$box_86\n
$version_86\n
$limit_DX\n
$resolution\n
$strech\n
$cores\n
$limit_fps\n
$dri_3\n
$servic\n\n
" 21 45
	if [ -n "$value" ]; then
		if [ -d "$PREFIX/glibc-x86" ]; then
        	mv $PREFIX/glibc $PREFIX/glibc-wow64 || { echo "Ошибка при переименовании glibc"; exit 1; }
        	mv $PREFIX/glibc-x86 $PREFIX/glibc || { echo "Ошибка при переименовании glibc-x86"; exit 1; }
        else 
			clear
			am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null &
			dialog --no-shadow \
			--msgbox "Mobox box86 не утановлен." 10 50
			clear
			exit 1
    	fi
    fi
sleep 0.5
export PULSE_SERVER=127.0.0.1
export DISPLAY=:0
if [[ "$TURNIP_86" == turnip* ]]; then
    if [ -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
        rm -rf $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null &
    fi
    if [ -f "$PREFIX/tmp/.virgl_test" ]; then
        rm -rf $PREFIX/tmp/.virgl_test &>/dev/null &
    fi
elif [[ "$TURNIP_86" == virgl* ]]; then
    if [ ! -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
        touch $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null &
        if [ -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
            chmod 777 $PREFIX/glibc/opt/virgl/virgl-enabled
        fi
    fi
    if [ ! -f "$PREFIX/tmp/.virgl_test" ]; then
        touch $PREFIX/tmp/.virgl_test &>/dev/null &
        if [ -f "$PREFIX/tmp/.virgl_test" ]; then
            chmod 777 $PREFIX/tmp/.virgl_test
        fi
    fi
    chmod +x $PREFIX/glibc/opt/virgl/libvirgl_test_server.so
	TMPDIR=$PREFIX/tmp $PREFIX/glibc/opt/virgl/libvirgl_test_server.so &>/dev/null &
fi
rm -rf $PREFIX/glibc/opt/shutdown
. "$PREFIX/mobox/link-kreator" "$HOME" > /dev/null 2>&1 &
cd
mkdir -p /sdcard/Android/data/com.termux/files/Download
. $PREFIX/mobox/configs86 &>/dev/null
. $PREFIX/glibc/opt/conf/path.conf &>/dev/null
. $PREFIX/glibc/opt/conf/force_compatibility.conf &>/dev/null
. $PREFIX/mobox/cleaner_links &>/dev/null
load_configs
termux-x11-preference displayStretch:$displayStretch displayResolutionMode:custom fullscreen:true forceLandscape:true displayResolutionCustom:$RESOLUTION_86 &>/dev/null
if [ "$LANG_BOX" = "ru_RU.utf8" ]; then
    if [ -f "$HOME/game86_RU" ]; then
        feh -Z -F "$HOME/game86_RU"
    fi &>/dev/null &
elif [ "$LANG_BOX" = "uk_UA.utf8" ]; then
    if [ -f "$HOME/game86_UA" ]; then
        feh -Z -F "$HOME/game86_UA"
    fi &>/dev/null &
elif [ "$LANG_BOX" = "en_US.utf8" ]; then
    if [ -f "$HOME/game86_EN" ]; then
        feh -Z -F "$HOME/game86_EN"
    fi &>/dev/null &
fi
DXVK_CONFIG_FILE=$PREFIX/glibc/opt/dxvk.conf
sed -i "1s/.*/${GALLIUM_HUD_86}/" "$hud"
sed -i "2s/.*/${GALLIUM_HUD_PERIOD_86}/" "$hud"
sed -i "3s/.*/${DXVK_HUD_86}/" "$hud"
if [ "$FPS_LIM_86" ]; then
    sed -i "4s/.*/dxgi.maxFrameRate = \"$FPS_LIM_86\"/" "$DXVK_CONFIG_FILE"
    sed -i "5s/.*/d3d9.maxFrameRate = \"$FPS_LIM_86\"/" "$DXVK_CONFIG_FILE"
fi
if [ "$DX_VER_86" ]; then
    sed -i "3s/.*/d3d11.maxFeatureLevel = \"$DX_VER_86\"/" "$DXVK_CONFIG_FILE"
fi
unzip_file() {
    local file_path="$1"
    local dest_dir="$2"
    
    if [ -e "$file_path" ]; then
        echo "Распаковка $file_path в $dest_dir..."
        unzip -o "$file_path" -d "$dest_dir"
        echo "Успешно распаковано."
    else
        echo "Файл $file_path не найден."
    fi
}
source "$PREFIX/glibc/opt/conf/wine_path.conf"
if [ -f "$BOX_FILE_86" ]; then
    unzip_file "$BOX_FILE_86" "$PREFIX/glibc/bin" &>/dev/null
elif [ ! -f "$BOX_FILE_86" ]; then
    tar -xf $PREFIX/glibc/opt/box/nov10.tar.xz -C $PREFIX/glibc/bin &>/dev/null
fi
chmod +x $PREFIX/glibc/bin/{box86,box64}
chmod +x $WINE_PATH/bin/{wine,wine64,wineserver}
patchelf --force-rpath --set-rpath $PREFIX/glibc/lib --set-interpreter $PREFIX/glibc/lib/ld-linux-aarch64.so.1 $PREFIX/glibc/bin/box64
patchelf --force-rpath --set-rpath $PREFIX/glibc/lib32 --set-interpreter $PREFIX/glibc/lib32/ld-linux-armhf.so.3 $PREFIX/glibc/bin/box86
rm -rf $PREFIX/glibc/bin/{wine,wine64,wineserver}
ln -sf $WINE_PATH/bin/wine $PREFIX/glibc/bin/wine
ln -sf $WINE_PATH/bin/wine64 $PREFIX/glibc/bin/wine64
ln -sf $WINE_PATH/bin/wineserver $PREFIX/glibc/bin/wineserver
export GLIBC_BIN=$PREFIX/glibc/bin
unset LD_PRELOAD
if [ ! -e $WINEPREFIX/.update-timestamp ]; then
clear
am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null &
dialog --no-shadow \
--msgbox "Wine не настроен.
Произведите первый запуск используя ярлык (Mobox-box86
для выхода нажмите ок." 10 50
clear
exit 1
else
    if [ -f "$DXVK_FILE_86" ]; then
        unzip_file "$DXVK_FILE_86" "$WINE_PATH/.wine/drive_c" &>/dev/null
    elif [ ! -f "$DXVK_FILE_86" ]; then
        if [[ "$DXVK_86" == dxvk*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\dxvk-async-1.10.3.bat" &>/dev/null
        elif [[ "$DXVK_86" == wined*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\wined3d-8.0.2.bat" &>/dev/null
        fi
    fi
    if [ -f "$TURNIP_FILE_86" ]; then
        unzip_file "$TURNIP_FILE_86" "$PREFIX/glibc" &>/dev/null
    elif [ ! -f "$TURNIP_FILE_86" ]; then
        if [[ "$TURNIP_86" == turnip*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\turnip-v4.bat" &>/dev/null
        elif [[ "$TURNIP_86" == virgl*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\virgl-mesa-18.bat" &>/dev/null
        fi
    fi
fi
load_configs
export PULSE_SERVER=127.0.0.1
export DISPLAY=:0
ln -sf $(df -H | grep -o "/storage/....-....") "$WINEPREFIX/dosdevices/f:" &>/dev/null
taskset -c $SEC_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 $PREFIX/glibc/bin/ib.exe &>/dev/null &
    LC_ALL=$LANG_BOX taskset -c $PRIM_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 start /min /unix $HOME/Desktop/"$GAME" &>$LOG_PATH 2>&1 &
taskset -c $SEC_COR_86 $GLIBC_BIN/box64 $GLIBC_BIN/wine64 start /min /unix $PREFIX/glibc/opt/apps/f5taskmgr.exe &>/dev/null &
if [ "$STARTUP_WINEDEVICE_MODE" = "0" ]; then
        $GLIBC_BIN/box64 $GLIBC_BIN/wine taskkill /f /im services.exe &>/dev/null &
fi
REBOOT=0
sleep 5
if ps aux | grep -v grep | grep -q "wine"
then
pkill feh &>/dev/null &
fi
REBOOT=0
LAST_SERVICES_86=${LAST_SERVICES_86:-1}
GAME_SHORT="${GAME%.lnk}"
GAME_SHORT="${GAME_SHORT:0:12}"
while true; do
strech="Изображение по ширине экрана $STRETCH_86"
if [ "$STRETCH_86" = "Не растянуто" ]; then
    NAME="Растянуть по ширине экрана"
else
    NAME="Стандартное разрешение экрана"
fi
wer=$(dialog --no-shadow \
--title "${GAME%.lnk}" --default-item "$LAST_SERVICES_86" --menu \
"\n
Настройки игры ${GAME%.lnk}\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_n_86\n
$dxvk_n_86\n
$box_n_86\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_86\n
$dxvk_86\n
$box_86\n
$version_86\n
$limit_DX\n
$resolution\n
$strech\n
$cores\n
$limit_fps\n
$dri_3\n
$servic\n" 26 45 4 \
    "1" "Завершить работу ${GAME_SHORT}" \
    "2" "$NAME" 2>&1 >/dev/tty)
case $? in
    1)  source "$HOME/.shortcuts/${GAME%.lnk}" & ;;
esac 
LAST_SERVICES_86=$wer
case $wer in
    1)   
        $GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null &
        break
        ;;
    2)  if [ "$STRETCH_86" = "Не растянуто" ]; then
        STRETCH_86="Растянуто"
        source "$HOME/.shortcuts/${GAME%.lnk}" &
        termux-x11-preference displayStretch:true
        NAME="Стандартное разрешение экрана"
        sed -i "173s/.*/STRETCH_86_eng=\"Stretched\"/" "${hom_game}"
        sed -i "117s/.*/STRETCH_86=\"Растянуто\"/" "${hom_game}"
        sed -i '116s/.*/displayStretch=true/' "${hom_game}"
    else
        STRETCH_86="Не растянуто"
        source "$HOME/.shortcuts/${GAME%.lnk}" &
        termux-x11-preference displayStretch:false
        NAME="Растянуть по ширине экрана"
        sed -i "173s/.*/STRETCH_86_eng=\"Not stretched\"/" "${hom_game}"
        sed -i "117s/.*/STRETCH_86=\"Не растянуто\"/" "${hom_game}"
        sed -i '116s/.*/displayStretch=false/' "${hom_game}"
    fi
        ;;
esac
if [ -e $PREFIX/glibc/opt/shutdown ]; then
	rm -rf $PREFIX/glibc/opt/shutdown
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	break
fi
if [ -e $PREFIX/glibc/opt/reboot ]; then
	rm -rf $PREFIX/glibc/opt/reboot
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	REBOOT=1
	break
fi
done
am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null
export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so
pkill -f inotifywait &>/dev/null
pkill -f Xnoimage-dex2oat &>/dev/null
stop-all
if [ "$REBOOT" = "1" ]; then
	exec $0
fi
elif [ "$BOX_VERS" == "WOW64" ]; then
    if [ "$OpenGL_WOW_eng" == "Enable" ]; then
        export LIBGL_DRI3=0
    else
        export LIBGL_DRI3=1
    fi
    
DXVK_FILE_64="$BASE_DIR/drivers/render/$DXVK_WOW"
TURNIP_FILE_64="$BASE_DIR/drivers/driver_x64/$TURNIP_WOW"
BOX_FILE_64="$BASE_DIR/box/$BOX_WOW"
if [ ! -f "$TURNIP_FILE_64" ]; then
turnip_n_wow="Не найден         ${TURNIP_WOW%.WEG}"
else
turnip_n_wow="Успешно           ${TURNIP_WOW%.WEG}"
fi
if [ ! -f "$DXVK_FILE_64" ]; then
dxvk_n_wow="Не найден         ${DXVK_WOW%.WEG}"
else
dxvk_n_wow="Успешно           ${DXVK_WOW%.WEG}"
fi
if [ ! -f "$BOX_FILE_64" ]; then
box_n_wow="Не найден         ${BOX_WOW%.WEG}"
else
box_n_wow="Успешно           ${BOX_WOW%.WEG}"
fi
if [ -f "$TURNIP_FILE_64" ]; then
turnip_wow="Driver версия:    ${TURNIP_WOW%.WEG}"
elif [ ! -f "$TURNIP_FILE_64" ]; then
    if [[ "$TURNIP_WOW" == turnip*.WEG ]]; then
turnip_wow="Driver системный: turnip-v6.5"
    elif [[ "$TURNIP_WOW" == virgl*.WEG ]]; then
turnip_wow="Driver системный: virgl-mesa-18"
    fi
fi

if [ -f "$DXVK_FILE_64" ]; then
dxvk_wow="Render версия:    ${DXVK_WOW%.WEG}"
elif [ ! -f "$DXVK_FILE_64" ]; then
    if [[ "$DXVK_WOW" == dxvk*.WEG ]]; then
dxvk_wow="Render системный: dxvk-async-1.10.3"
    elif [[ "$DXVK_WOW" == wined*.WEG ]]; then
dxvk_wow="Render системный: wined3d-8.0.2"
    fi
fi
if [ -f "$BOX_FILE_64" ]; then
   box_wow="Box    версия:    ${BOX_WOW%.WEG}"
elif [ ! -f "$BOX_FILE_64" ]; then
box_wow="Box    системный: box64mar3"
fi
version_wow="Mobox  версия:               $MOBOX_WOW"
limit_DX="Лимит DirectX:               $DX_VER_WOW"
resolution="Разрешение экрана:           $RESOLUTION_WOW"
strech="Изображение по ширине экрана $STRETCH_WOW"
cores="Активные ядра:               $PRIM_COR_WOW"
limit_fps="Лимит FPS:                   $FPS_LIM_WOW"
dri_3="DRI 3:                       $DRI3_WOW"
servic="Автозапуск Services.exe:     $SERVICES_WOW"
dialog --no-shadow \
--title "Запуск ${GAME%.lnk}" --infobox "\n
Настройки игры ${GAME%.lnk}\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_n_wow\n
$dxvk_n_wow\n
$box_n_wow\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_wow\n
$dxvk_wow\n
$box_wow\n
$version_wow\n
$limit_DX\n
$resolution\n
$strech\n
$cores\n
$limit_fps\n
$dri_3\n
$servic\n\n
" 21 45
if [ -z "$value" ]; then
    if [ -d "$PREFIX/glibc-wow64" ]; then
        mv $PREFIX/glibc $PREFIX/glibc-x86 || { echo "Ошибка при переименовании glibc"; exit 1; }
        mv $PREFIX/glibc-wow64 $PREFIX/glibc || { echo "Ошибка при переименовании glibc-wow64"; exit 1; }
    else
        clear
        am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null &
        dialog --no-shadow \
        --msgbox "Mobox WoW64 не установлен." 10 50
        clear
        exit 1
    fi
fi
sleep 0.5
export PULSE_SERVER=127.0.0.1
export DISPLAY=:0
if [[ "$TURNIP_WOW" == turnip* ]]; then
    if [ -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
        rm -rf $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null &
    fi
    if [ -f "$PREFIX/tmp/.virgl_test" ]; then
        rm -rf $PREFIX/tmp/.virgl_test &>/dev/null &
    fi
elif [[ "$TURNIP_WOW" == virgl* ]]; then
    if [ ! -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
        touch $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null &
        if [ -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
            chmod 777 $PREFIX/glibc/opt/virgl/virgl-enabled
        fi
    fi
    if [ ! -f "$PREFIX/tmp/.virgl_test" ]; then
        touch $PREFIX/tmp/.virgl_test &>/dev/null &
        if [ -f "$PREFIX/tmp/.virgl_test" ]; then
            chmod 777 $PREFIX/tmp/.virgl_test
        fi
    fi
    chmod +x $PREFIX/glibc/opt/virgl/libvirgl_test_server.so
	TMPDIR=$PREFIX/tmp $PREFIX/glibc/opt/virgl/libvirgl_test_server.so &>/dev/null &
fi
rm -rf $PREFIX/glibc/opt/shutdown
. "$PREFIX/mobox/link-kreator" "$HOME" > /dev/null 2>&1 &
cd
mkdir -p /sdcard/Android/data/com.termux/files/Download
. $PREFIX/mobox/configs
. $PREFIX/glibc/opt/conf/path.conf &>/dev/null
. $PREFIX/glibc/opt/conf/force_compatibility.conf &>/dev/null
. $PREFIX/mobox/cleaner_links &>/dev/null
load_configs
termux-x11-preference displayStretch:$displayStretch displayResolutionMode:custom fullscreen:true forceLandscape:true displayResolutionCustom:$RESOLUTION_WOW &>/dev/null
sleep 1
if [ "$LANG_BOX" = "ru_RU.utf8" ]; then
    if [ -f "$HOME/game64_RU" ]; then
        feh -Z -F "$HOME/game64_RU"
    fi &>/dev/null &
elif [ "$LANG_BOX" = "uk_UA.utf8" ]; then
    if [ -f "$HOME/game64_UA" ]; then
        feh -Z -F "$HOME/game64_UA"
    fi &>/dev/null &
elif [ "$LANG_BOX" = "en_US.utf8" ]; then
    if [ -f "$HOME/game64_EN" ]; then
        feh -Z -F "$HOME/game64_EN"
    fi &>/dev/null &
elif [ "$LANG_BOX" = "ar_AE.utf8" ]; then
    if [ -f "$HOME/game64_AR" ]; then
        feh -Z -F "$HOME/game64_AR"
    fi &>/dev/null &
fi
DXVK_CONFIG_FILE=$PREFIX/glibc/opt/dxvk.conf
sed -i "1s/.*/${GALLIUM_HUD_WOW}/" "$hud"
sed -i "2s/.*/${GALLIUM_HUD_PERIOD_WOW}/" "$hud"
sed -i "3s/.*/${DXVK_HUD_WOW}/" "$hud"
if [ "$FPS_LIM_WOW" ]; then
    sed -i "4s/.*/dxgi.maxFrameRate = \"$FPS_LIM_WOW\"/" "$DXVK_CONFIG_FILE"
    sed -i "5s/.*/d3d9.maxFrameRate = \"$FPS_LIM_WOW\"/" "$DXVK_CONFIG_FILE"
fi
if [ "$DX_VER_WOW" ]; then
    sed -i "3s/.*/d3d11.maxFeatureLevel = \"$DX_VER_WOW\"/" "$DXVK_CONFIG_FILE"
fi
unzip_file() {
    local file_path="$1"
    local dest_dir="$2"
    
    if [ -e "$file_path" ]; then
        echo "Распаковка $file_path в $dest_dir..."
        unzip -o "$file_path" -d "$dest_dir"
        echo "Успешно распаковано."
    else
        echo "Файл $file_path не найден."
    fi
}
source "$PREFIX/glibc/opt/conf/wine_path.conf"
if [ -f "$BOX_FILE_64" ]; then
    unzip_file "$BOX_FILE_64" "$PREFIX/glibc/bin" &>/dev/null
elif [ ! -f "$BOX_FILE_64" ]; then
    tar -xf $PREFIX/glibc/opt/box/mar3.tar.xz -C $PREFIX/glibc/bin &>/dev/null
fi
chmod +x $PREFIX/glibc/bin/box64
chmod +x $WINE_PATH/bin/{wine,wineserver}
patchelf --force-rpath --set-rpath $PREFIX/glibc/lib --set-interpreter $PREFIX/glibc/lib/ld-linux-aarch64.so.1 $PREFIX/glibc/bin/box64
rm -rf $PREFIX/glibc/bin/{wine,wineserver}
ln -sf $WINE_PATH/bin/wine $PREFIX/glibc/bin/wine
ln -sf $WINE_PATH/bin/wineserver $PREFIX/glibc/bin/wineserver
export GLIBC_BIN=$PREFIX/glibc/bin
unset LD_PRELOAD
if [ ! -e $WINEPREFIX/.update-timestamp ]; then
clear
am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null &
dialog --no-shadow \
--msgbox "Wine не настроен.
Произведите первый запуск используя ярлык (Mobox-WoW64
для выхода нажмите ок." 10 50
clear
exit 1
else
    if [ -f "$DXVK_FILE_64" ]; then
        unzip_file "$DXVK_FILE_64" "$WINE_PATH/.wine/drive_c" &>/dev/null
    elif [ ! -f "$DXVK_FILE_64" ]; then
        if [[ "$DXVK_WOW" == dxvk*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_WOW $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\dxvk-async-1.10.3.bat" &>/dev/null
        elif [[ "$DXVK_WOW" == wined*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_WOW $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\wined3d-8.0.2.bat" &>/dev/null
        fi
    fi
    if [ -f "$TURNIP_FILE_64" ]; then
        unzip_file "$TURNIP_FILE_64" "$PREFIX/glibc" &>/dev/null
    elif [ ! -f "$TURNIP_FILE_64" ]; then
        if [[ "$TURNIP_WOW" == turnip*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_WOW $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\turnip-v6.5.bat" &>/dev/null
        elif [[ "$TURNIP_WOW" == virgl*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIM_COR_WOW $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\virgl-mesa-18.bat" &>/dev/null
        fi
    fi
fi
load_configs
export PULSE_SERVER=127.0.0.1
export DISPLAY=:0
taskset -c "$SEC_COR_WOW" "$GLIBC_BIN/box64" "$GLIBC_BIN/wine" start /min /unix "$PREFIX/glibc/opt/apps/f5taskmgr.exe" &>/dev/null &
ln -sf $(df -H | grep -o "/storage/....-....") "$WINEPREFIX/dosdevices/f:" &>/dev/null
taskset -c "$EXTRA_CORE" "$GLIBC_BIN/box64" "$GLIBC_BIN/wine" "$PREFIX/glibc/bin/ib.exe" &>/dev/null &
  LC_ALL=$LANG_BOX taskset -c "$PRIM_COR_WOW"   "$GLIBC_BIN/box64" "$GLIBC_BIN/wine" start /min /unix "$HOME/Desktop/$GAME" &> "$LOG_PATH" 2>&1 &
if [ "$STARTUP_WINEDEVICE_MODE" = "0" ]; then
	$GLIBC_BIN/box64 $GLIBC_BIN/wine taskkill /f /im services.exe &>/dev/null &
fi
REBOOT=0
sleep 5
if ps aux | grep -v grep | grep -q "wine"
then
pkill feh &>/dev/null &
fi
REBOOT=0
LAST_SERVICES_WOW=${LAST_SERVICES_WOW:-1}
GAME_SHORT="${GAME%.lnk}"
GAME_SHORT="${GAME_SHORT:0:12}"
while true; do
strech="Изображение по ширине экрана $STRETCH_WOW"
if [ "$STRETCH_WOW" = "Не растянуто" ]; then
    NAME="Растянуть по ширине экрана"
else
    NAME="Стандартное разрешение экрана"
fi
wer=$(dialog --no-shadow \
--title "${GAME%.lnk}" --default-item "$LAST_SERVICES_WOW" --menu \
"\n
Настройки игры ${GAME%.lnk}\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_n_wow\n
$dxvk_n_wow\n
$box_n_wow\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_wow\n
$dxvk_wow\n
$box_wow\n
$version_wow\n
$limit_DX\n
$resolution\n
$strech\n
$cores\n
$limit_fps\n
$dri_3\n
$servic\n" 26 45 4 \
    "1" "Завершить работу ${GAME_SHORT}" \
    "2" "$NAME"  2>&1 >/dev/tty)
case $? in
    1)  source "$HOME/.shortcuts/${GAME%.lnk}" & ;;
esac 
LAST_SERVICES_WOW=$wer
case $wer in
    1) 
        $GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null &
        break
        ;;
    2)  
    if [ "$STRETCH_WOW" = "Не растянуто" ]; then
        STRETCH_WOW="Растянуто"
        source "$HOME/.shortcuts/${GAME%.lnk}" &
        termux-x11-preference displayStretch:true
        NAME="Стандартное разрешение экрана"
        sed -i "83s/.*/STRETCH_WOW_eng=\"Stretched\"/" "${hom_game}"
        sed -i "37s/.*/STRETCH_WOW=\"Растянуто\"/" "${hom_game}"
        sed -i '36s/.*/displayStretch=true/' "${hom_game}"
    else
        STRETCH_WOW="Не растянуто"
        source "$HOME/.shortcuts/${GAME%.lnk}" &
        termux-x11-preference displayStretch:false
        NAME="Растянуть по ширине экрана"
        sed -i "83s/.*/STRETCH_WOW_eng=\"Not stretched\"/" "${hom_game}"
        sed -i "37s/.*/STRETCH_WOW=\"Не растянуто\"/" "${hom_game}"
        sed -i '36s/.*/displayStretch=false/' "${hom_game}"
    fi
        ;;
esac
if [ -e $PREFIX/glibc/opt/shutdown ]; then
	rm -rf $PREFIX/glibc/opt/shutdown
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	break
fi
if [ -e $PREFIX/glibc/opt/reboot ]; then
	rm -rf $PREFIX/glibc/opt/reboot
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	REBOOT=1
	break
fi
done
am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null
export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so
pkill -f inotifywait &>/dev/null
pkill -f Xnoimage-dex2oat &>/dev/null
stop-all
if [ "$REBOOT" = "1" ]; then
	exec $0
fi
fi
fi
}