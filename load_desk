#!/bin/bash

termux-x11 :0 &>/dev/null &

######################################################
function check_running_wine(){
######################################################
                GAME="$1"
    if ps aux | grep -v grep | grep -q "wine"
    then
            exit
    else
            tmux new -d -s 0
            function load_sys(){
######################################################
function base_environment(){
#                Базовые настройки окружения 

    export LOG_PATH=/sdcard/W-Box_log.txt
    export VK_ICD_FILENAMES=$PREFIX/glibc/share/vulkan/icd.d/freedreno_icd.aarch64.json
    export DXVK_CONFIG_FILE=$PREFIX/glibc/opt/dxvk.conf
    export FONTCONFIG_PATH=$PREFIX/glibc/etc/fonts
    export BOX64_PATH=$PREFIX/glibc/bin
    export DXVK_ASYNC=1
    export VKD3D_FEATURE_LEVEL=12_0
    export BOX64_LD_LIBRARY_PATH=$WINE_PATH/lib64:$WINE_PATH/lib64/wine/x86_64-unix:$PREFIX/glibc/lib/x86_64-linux-gnu
    export BOX64_MMAP32=1
    export tu_allow_oob_indirect_ubo_loads=true
    export WINEESYNC=1
    export WINEESYNC_TERMUX=1

}
#                Базовые настройки окружения 
######################################################
function stop_all(){
#                Остановка процессов
    rm -rf ~/.cache/*
    pkill -f "app_process / com.termux.x11"
    rm -rf $PREFIX/tmp/pulse-*
    pulseaudio -k &>/dev/null
    unset PULSE_SERVER
    rm -rf $PREFIX/tmp/.virgl_test &>/dev/null
    pkill virgl
    rm -rf $PREFIX/tmp/.virgl_test &>/dev/null

} 
#                Остановка процессов
######################################################
function pulseaudio_x11(){
#                Запуск х11 и pulseaudio
    pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1

    termux-x11 :0 &>/dev/null &
} 
#                Запуск х11 и pulseaudio
######################################################
function location_file_conf(){
#                Перенаправление файлов в переменные
BASE_DIR=$(cat "$PREFIX/bin/widget/directory")

hud="$PREFIX/W-Box/hud.conf"

hom_game="$HOME/.shortcuts/,/${GAME%.lnk}"

}
#                Перенаправление файлов в переменные
######################################################
function load_configs(){
#                Загрузка переменных окружения

function game_conf(){
    # Загрузить переменные из 1-й и 3-й строк конфигурационного файла
    eval $(sed -n '2p;3p' "$hom_game")

    # В зависимости от версии платформы, загрузить соответствующие параметры
    case "$BOX_VERS" in
        "X86")
            # Загрузить параметры для платформы X86
            eval $(sed -n '94,141p; 162,180p' "$hom_game")
            # Обработать и выполнить команды из строк 144-159
            eval "$(sed -n '144,159p' "$hom_game" | sed -E "s/^echo //; s/^'//; s/'$//")"
            ;;

        "WOW64")
            # Загрузить параметры для платформы WOW64
            eval $(sed -n '14,61p; 76,92p' "$hom_game")
            # Обработать и выполнить команды из строк 64-73
            eval "$(sed -n '64,73p' "$hom_game" | sed -E "s/^echo //; s/^'//; s/'$//")"
            ;;
    esac
}
          game_conf
    cd
mkdir -p /sdcard/Android/data/com.termux/files/Download
. $PREFIX/W-Box/configs &>/dev/null
. $PREFIX/W-Box/path.conf &>/dev/null
. $PREFIX/W-Box/force_compatibility.conf &>/dev/null
. $PREFIX/W-Box/cleaner_links &>/dev/null
  load_configs_wow &>/dev/null

}
#                Загрузка переменных окружения
######################################################
function export_display(){
    sleep 0.5
export PULSE_SERVER=127.0.0.1
export DISPLAY=:0

}
#                Экспорт параметров дисплея
######################################################
function show_splash() {
    #
    #    возмо потребуется загрузка конфига
    #
    
    case "$BOX_VERS" in
        "X86") splash_dir="$HOME/86" ;;
        "WOW64") splash_dir="$HOME/64" ;;
        *) echo "Неизвестная архитектура: $BOX_VERS"; return 1 ;;
    esac

    case "$BOX_LNG" in
        "ru_RU") feh -Z -F "${splash_dir}_RU" & ;;
        "uk_UA") feh -Z -F "${splash_dir}_UA" & ;;
        "en_US") feh -Z -F "${splash_dir}_EN" & ;;
        *) echo "Неизвестный язык: $BOX_LNG"; return 1 ;;
    esac
    echo "функция show_splash выполнена"
}
#                Загрузка экрана приветствия
######################################################
function auto_run_ib(){
if [ "$InBr_eng" = "Enable" ]; then
am start -n com.catfixture.inputbridge/com.catfixture.inputbridge.ui.activity.main.MainActivity &>/dev/null
am start --user 0 com.termux.x11/.MainActivity &>/dev/null
else
am start --user 0 com.termux.x11/.MainActivity &>/dev/null
sleep 0.2
am start --user 0 com.termux.x11/.MainActivity &>/dev/null
fi
}
#                Режим загрузки IB.apk
######################################################
function OpenGL_WOW_eng_func() {
        if [ "$OpenGL_WOW_eng" == "Enable" ]; then
            export LIBGL_DRI3=1
        else
            export LIBGL_DRI3=0
        fi
    } 
#                возможно убрать
######################################################
function check_load_file(){
    
DXVK_FILE_64="$BASE_DIR/drivers/render/$DXVK_WOW"
TURNIP_FILE_64="$BASE_DIR/drivers/driver_x64/$TURNIP_WOW"
    BOX_FILE_64="$BASE_DIR/box/$BOX_WOW"
    if [ ! -f "$TURNIP_FILE_64" ]; then
turnip_n_wow="Не найден         ${TURNIP_WOW%.WEG}"
    else
turnip_n_wow="Успешно           ${TURNIP_WOW%.WEG}"
    fi
    if [ ! -f "$DXVK_FILE_64" ]; then
dxvk_n_wow="Не найден         ${DXVK_WOW%.WEG}"
    else
dxvk_n_wow="Успешно           ${DXVK_WOW%.WEG}"
    fi
    if [ ! -f "$BOX_FILE_64" ]; then
box_n_wow="Не найден         ${BOX_WOW%.WEG}"
    else
box_n_wow="Успешно           ${BOX_WOW%.WEG}"
    fi
    if [ -f "$TURNIP_FILE_64" ]; then
turnip_wow="Driver версия:    ${TURNIP_WOW%.WEG}"
    elif [ ! -f "$TURNIP_FILE_64" ]; then
    if [[ "$TURNIP_WOW" == turnip*.WEG ]]; then
turnip_wow="Driver системный: turnip-v6.5"
    elif [[ "$TURNIP_WOW" == virgl*.WEG ]]; then
turnip_wow="Driver системный: virgl-mesa-18"
    fi
    fi

    if [ -f "$DXVK_FILE_64" ]; then
dxvk_wow="Render версия:    ${DXVK_WOW%.WEG}"
    elif [ ! -f "$DXVK_FILE_64" ]; then
    if [[ "$DXVK_WOW" == dxvk*.WEG ]]; then
dxvk_wow="Render системный: dxvk-async-1.10.3"
    elif [[ "$DXVK_WOW" == wined*.WEG ]]; then
dxvk_wow="Render системный: wined3d-8.0.2"
    fi
    fi
    if [ -f "$BOX_FILE_64" ]; then
box_wow="Box    версия:    ${BOX_WOW%.WEG}"
    elif [ ! -f "$BOX_FILE_64" ]; then
box_wow="Box    системный: box64mar3"
    fi
version_wow="W-Box  версия:               $W_BOX_WOW"
limit_DX="Лимит DirectX:               $DX_VER_WOW"
resolution="Разрешение экрана:           $RESOLUTION_WOW"
strech="Изображение по ширине экрана $STRETCH_WOW"
cores="Активные ядра:               $CORES_WOW"
limit_fps="Лимит FPS:                   $FPS_LIM_WOW"
dri_3="DRI 3:                       $DRI3_WOW"
servic="Автозапуск Services.exe:     $SERVICES_WOW"
dialog --title "Запуск ${GAME%.lnk}" --infobox "\n
Настройки W-Box\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_n_wow\n
$dxvk_n_wow\n
$box_n_wow\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_wow\n
$dxvk_wow\n
$box_wow\n
$version_wow\n
$limit_DX\n
$resolution\n
$strech\n
$cores\n
$limit_fps\n
$dri_3\n
$servic\n\n
" 21 45
}
#                Вывод информации
######################################################
function change_render(){
    if [[ "$TURNIP_WOW" == turnip* ]]; then
    if [ -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
        rm -rf $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null &
    fi
    if [ -f "$PREFIX/tmp/.virgl_test" ]; then
        rm -rf $PREFIX/tmp/.virgl_test &>/dev/null &
    fi
elif [[ "$TURNIP_WOW" == virgl* ]]; then
    if [ ! -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
        touch $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null &
        if [ -f "$PREFIX/glibc/opt/virgl/virgl-enabled" ]; then
            chmod 777 $PREFIX/glibc/opt/virgl/virgl-enabled &>/dev/null
        fi
    fi
    if [ ! -f "$PREFIX/tmp/.virgl_test" ]; then
        touch $PREFIX/tmp/.virgl_test &>/dev/null &
        if [ -f "$PREFIX/tmp/.virgl_test" ]; then
            chmod 777 $PREFIX/tmp/.virgl_test &>/dev/null
        fi
    fi
    chmod +x $PREFIX/glibc/opt/virgl/libvirgl_test_server.so &>/dev/null
	TMPDIR=$PREFIX/tmp $PREFIX/glibc/opt/virgl/libvirgl_test_server.so &>/dev/null &
fi
rm -rf $PREFIX/glibc/opt/shutdown
}
#                Смена Turnip / VirGl
######################################################
function link_creator() {

    # Определение путей к директориям и файлам
    WATCHED_DIR="$HOME/Desktop"  # Директория, за которой ведется наблюдение (рабочий стол)
    SOURCE_CODE="$PREFIX/W-Box/source-code"  # Исходный код для создания ярлыков
    SHORTCUTS_DIR="$HOME/.shortcuts"  # Директория для хранения ярлыков
    ICON_DIR="$HOME/.shortcuts/icons"  # Директория для хранения иконок

    # Загрузка конфигурации wine_path.conf (если файл существует)
    source "$PREFIX/W-Box/wine_path.conf" &>/dev/null

    # Извлечение пути к Wine из конфигурационного файла
    VAR=$(head -n 1 "$PREFIX/W-Box/wine_path.conf" | sed 's/^.\{31\}//')

    # Создание директории для иконок, если она не существует
    mkdir -p "$ICON_DIR"

    # Функция для обновления версии в файле
    update_version() {
        local file="$1"
        # Обновление строки с версией на "WOW64"
        sed -i "3s/.*/BOX_VERS=WOW64/" "$file"
    }

    # Функция для извлечения пути к Wine из .lnk файла
    function extract_wine_path() {
        local lnk_file="$1"
        local wine_path
        # Извлечение пути к .exe файлу из .lnk файла
        wine_path=$(strings "$lnk_file" | grep -i ".exe" | sed 's|^\([A-Z]:\)|.wine/dosdevices/\L\1|' | sed 's|\\|/|g' | sed -n '2p')
        echo "$wine_path"
    }

    # Наблюдение за директорией WATCHED_DIR (рабочий стол) на предмет создания новых файлов
    inotifywait -m "$WATCHED_DIR" -e create |
    while read -r path action file; do
        if [[ -n "$file" ]]; then
            # Получение имени файла без расширения
            FILENAME=$(basename -- "$file")
            SHORTCUT_FILE="$SHORTCUTS_DIR/${FILENAME%.lnk}"

            # Копирование исходного кода в директорию ярлыков
            cp -r "$SOURCE_CODE" "$SHORTCUT_FILE" || { echo "Ошибка копирования $SOURCE_CODE"; continue; }

            # Обновление конфигурации в файле ярлыка
            sed -i "4s/.*/GAME='$FILENAME'/; 3s/.*/BOX_VERS='WOW64'" "$SHORTCUT_FILE"
            sed -i "5s/.*/ADRES_C=\"${VAR//\//\\/}\/.wine\/drive_c\"/" "$SHORTCUT_FILE"
        fi
    done &

    # Наблюдение за директорией WATCHED_DIR (рабочий стол) на предмет создания новых .lnk файлов
    inotifywait -m -e create --format '%f' "$WATCHED_DIR" | while read NEW_FILE; do
        if [[ "$NEW_FILE" == *.lnk ]]; then
            ORIGINAL_FILE="$WATCHED_DIR/$NEW_FILE"

            # Извлечение пути к Wine из .lnk файла
            wine_path=$(extract_wine_path "$ORIGINAL_FILE")
            if [ -z "$wine_path" ]; then
                continue  # Пропустить, если путь не найден
            fi
            if [ ! -f "$WINE_PATH/$wine_path" ]; then
                continue  # Пропустить, если файл по пути не существует
            fi

            # Извлечение иконки из .exe файла и сохранение в директорию иконок
            wrestool -x -t 14 "$WINE_PATH/$wine_path" > "$ICON_DIR/${NEW_FILE%.lnk}.png"
        fi
    done
}
#                Создание ярлыков
######################################################
function delete_link() {
    # Определение путей к директориям
    shortcuts_dir="$HOME/.shortcuts"  # Директория с ярлыками (.lnk)
    icons_dir="$HOME/.shortcuts/icons"  # Директория с иконками (.png)
    desktop_dir="$HOME/Desktop"  # Директория рабочего стола

    # Получение списка всех .lnk файлов на рабочем столе (без расширения .lnk)
    mapfile -t desktop_files < <(find "$desktop_dir" -maxdepth 1 -type f -name "*.lnk" -exec basename {} .lnk \;)

    # Список запрещенных ярлыков, которые нельзя удалять
    forbidden_shortcuts=("W-Box" "Settings" "Exit Termux")

    # Удаление .lnk файлов из shortcuts_dir, которые отсутствуют на рабочем столе и не входят в список запрещенных
    for shortcut in "$shortcuts_dir"/*; do
        # Если файл не существует, прервать цикл
        if [[ ! -e "$shortcut" ]]; then
            break
        fi
        # Получение имени файла без расширения .lnk
        shortcut_name=$(basename "$shortcut" .lnk)
        # Проверка, есть ли файл с таким именем на рабочем столе
        if [[ ! " ${desktop_files[*]} " =~ " $shortcut_name " ]]; then
            # Проверка, не входит ли файл в список запрещенных
            if [[ " ${forbidden_shortcuts[*]} " =~ " $shortcut_name " ]]; then
                continue  # Пропустить удаление, если файл запрещен
            fi
            # Удаление файла
            rm "$shortcut"
        fi
    done

    # Удаление .png файлов из icons_dir, для которых нет соответствующего .lnk файла в shortcuts_dir и которые не входят в список запрещенных
    for icon in "$icons_dir"/*.png; do
        # Если файл не существует, прервать цикл
        if [[ ! -e "$icon" ]]; then
            break
        fi
        # Получение имени файла без расширения .png
        icon_name=$(basename "$icon" .png)
        # Проверка, существует ли соответствующий .lnk файл в shortcuts_dir
        if [[ ! -f "$shortcuts_dir/$icon_name" ]]; then
            # Проверка, не входит ли файл в список запрещенных
            if [[ " ${forbidden_shortcuts[@]} " =~ " $icon_name " ]]; then
                continue  # Пропустить удаление, если файл запрещен
            fi
            # Удаление файла
            rm "$icon"
        fi
    done
}
#                Удаление ярлыков
######################################################
function dxvk_reconfig(){
    DXVK_CONFIG_FILE=$PREFIX/glibc/opt/dxvk.conf
sed -i "1s/.*/${GALLIUM_HUD_WOW}/" "$hud"
sed -i "2s/.*/${GALLIUM_HUD_PERIOD_WOW}/" "$hud"
sed -i "3s/.*/${DXVK_HUD_WOW}/" "$hud"
if [ "$FPS_LIM_WOW" ]; then
    sed -i "4s/.*/dxgi.maxFrameRate = \"$FPS_LIM_WOW\"/" "$DXVK_CONFIG_FILE"
    sed -i "5s/.*/d3d9.maxFrameRate = \"$FPS_LIM_WOW\"/" "$DXVK_CONFIG_FILE"
fi
if [ "$DX_VER_WOW" ]; then
    sed -i "3s/.*/d3d11.maxFeatureLevel = \"$DX_VER_WOW\"/" "$DXVK_CONFIG_FILE"
fi
}
#                Изменение настроек DXVK
######################################################
function install_box64(){
    
function unzip_file(){
    local file_path="$1"
    local dest_dir="$2"
    if [ -e "$file_path" ]; then
        echo "Распаковка $file_path в $dest_dir..."
        unzip -o "$file_path" -d "$dest_dir"
        echo "Успешно распаковано."
    else
        echo "Файл $file_path не найден."
    fi
}

source "$PREFIX/glibc/opt/conf/wine_path.conf"
if [ -f "$BOX_FILE_64" ]; then
    unzip_file "$BOX_FILE_64" "$PREFIX/glibc/bin" &>/dev/null
elif [ ! -f "$BOX_FILE_64" ]; then
    tar -xf $PREFIX/glibc/opt/box/mar3.tar.xz -C $PREFIX/glibc/bin &>/dev/null
fi
chmod +x $PREFIX/glibc/bin/box64
chmod +x $WINE_PATH/bin/{wine,wineserver}
patchelf --force-rpath --set-rpath $PREFIX/glibc/lib --set-interpreter $PREFIX/glibc/lib/ld-linux-aarch64.so.1 $PREFIX/glibc/bin/box64
rm -rf $PREFIX/glibc/bin/{wine,wineserver}
ln -sf $WINE_PATH/bin/wine $PREFIX/glibc/bin/wine
ln -sf $WINE_PATH/bin/wineserver $PREFIX/glibc/bin/wineserver
}
#                Установка Box64
######################################################
function create_wine_container(){

export GLIBC_BIN=$PREFIX/glibc/bin
unset LD_PRELOAD
if [ ! -e $WINEPREFIX/.update-timestamp ]; then
echo -e "\033[93mНастройка и установка компонентов\033[0m \033[36mW-Box.\033[0m"
echo -e "\033[93mЭто может занять несколько минут.\033[0m"
	rm -rf $WINEPREFIX
	unset BOX64_DYNAREC_BIGBLOCK
	unset WINEESYNC
	unset WINEESYNC_TERMUX
	unset BOX64_DYNAREC_CALLRET
	if [ -e $WINE_PATH/lib/wine/i386-windows/shell32-bak.dll ] || [ -e $WINE_PATH/lib64/wine/x86_64-windows/shell32-bak.dll ]; then
		mv $WINE_PATH/lib/wine/i386-windows/shell32-bak.dll $WINE_PATH/lib/wine/i386-windows/shell32.dll &>/dev/null
		mv $WINE_PATH/lib/wine/x86_64-windows/shell32-bak.dll $WINE_PATH/lib/wine/x86_64-windows/shell32.dll &>/dev/null
		mv $WINE_PATH/lib64/wine/x86_64-windows/shell32-bak.dll $WINE_PATH/lib64/wine/x86_64-windows/shell32.dll &>/dev/null
		mv $WINE_PATH/lib64/wine/i386-windows/shell32-bak.dll $WINE_PATH/lib64/wine/i386-windows/shell32.dll &>/dev/null
	fi
if [ $WINE_64 = OFF ]; then
    export DISPLAY=:1
fi
	WINEDLLOVERRIDES="winegstreamer=disabled,mscoree=disabled" taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine wineboot -u >${LOG_PATH}_wineboot.txt 2>&1
	if [ ! -e $WINEPREFIX/.update-timestamp ]; then
		echo "Невозможно настроить. См. ${LOG_PATH}_wineboot.txt"
		$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
		export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so
		rm -rf $PREFIX/tmp/pulse-*
		pulseaudio -k &>/dev/null
		pkill -f pulseaudio
		pkill -f "app_process / com.termux.x11"
		sleep 5
		exit
	fi
	echo "disable">$WINEPREFIX/.update-timestamp
	7z x $PREFIX/glibc/opt/prefix/drive_c.7z -o$WINEPREFIX/drive_c -y &>/dev/null
echo -e "\033[92mУстановка\033[0m \033[36mDirectX\033[0m"
	7z x $PREFIX/glibc/opt/prefix/directx.7z -o$WINEPREFIX/drive_c -y &>/dev/null
echo -e "\033[92mУстановка\033[0m \033[36mярлыков в меню «Пуск»\033[0m"
	cp -r $PREFIX/glibc/opt/prefix/start/* "$WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start Menu"
	rm -rf "$WINEPREFIX/dosdevices/z:"
	ln -sf /data/data/com.termux/files "$WINEPREFIX/dosdevices/z:"
	ln -sf /sdcard/Download "$WINEPREFIX/dosdevices/d:"
	ln -sf /sdcard/Android/data/com.termux/files/Download "$WINEPREFIX/dosdevices/e:"
echo -e "\033[92mУстановка\033[0m \033[36mтвиков реестра\033[0m"
	cp $PREFIX/glibc/opt/prefix/marlett.ttf $WINEPREFIX/drive_c/windows/Fonts
	taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine regedit $PREFIX/glibc/opt/prefix/user.reg &>/dev/null
	taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine regedit $PREFIX/glibc/opt/prefix/system.reg &>/dev/null
	mkdir -p "$WINEPREFIX/W-Box-meta"
	taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine regedit $PREFIX/glibc/opt/prefix/fix-services.reg &>/dev/null
	touch $WINEPREFIX/W-Box-meta/services-fix-applied
	tar -xf $PREFIX/glibc/opt/prefix/fix-fonts.tar.xz -C $WINEPREFIX/drive_c/windows
	touch $WINEPREFIX/W-Box-meta/fonts-fix-applied
	touch $WINEPREFIX/W-Box-meta/dxdlls-fix-applied
	if [ ! "$STARTUP_COMPATIBILITY_MODE" = "1" ]; then
echo -e "\033[92mУстановка\033[0m \033[36mPhysX 9.10, 7-Zip, Visual C++\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "start Z:\\usr\\glibc\\opt\\apps\\install.bat" >${LOG_PATH}_redist.txt 2>&1
		if [ -f "$DXVK_FILE_64" ]; then
		    sleep 1
echo -e "\033[92mУстановка\033[0m \033[36m"${DXVK_WOW%.*}"\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\"${DXVK_WOW%.*}".bat" &>/dev/null
        elif [ ! -f "$DXVK_FILE_64" ]; then
            if [[ "$DXVK_WOW" == dxvk*.WEG ]]; then
            sleep 1
echo -e "\033[92mУстановка\033[0m \033[36mdxvk-async-1.10.3\033[0m\033[38;5;202m (W-Box)\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\dxvk-async-1.10.3.bat" &>/dev/null
			elif [[ "$DXVK_WOW" == wined*.WEG ]]; then
			sleep 1
echo -e "\033[92mУстановка\033[0m \033[36mwined3d-8.0.2\033[0m\033[38;5;202m (W-Box)\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\wined3d-8.0.2.bat" &>/dev/null
		    fi
		fi
		if [ -f "$TURNIP_FILE_64" ]; then
	    	sleep 1
echo -e "\033[92mУстановка\033[0m \033[36m"${TURNIP_WOW%.*}"\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\"${TURNIP_WOW%.*}".bat" &>/dev/null
        elif [ ! -f "$TURNIP_FILE_64" ]; then
            if [[ "$TURNIP_WOW" == turnip*.WEG ]]; then
            sleep 1
echo -e "\033[92mУстановка\033[0m \033[36mturnip-v6.5\033[0m\033[38;5;202m (W-Box)\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\turnip-v6.5.bat" &>/dev/null
			elif [[ "$TURNIP_WOW" == virgl*.WEG ]]; then
			sleep 1
echo -e "\033[92mУстановка\033[0m \033[36mvirgl-mesa-18\033[0m\033[38;5;202m (W-Box)\033[0m"
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\virgl-mesa-18.bat" &>/dev/null
		    fi
		fi
	fi
	sleep 3
	if [ -e $WINE_PATH/lib/wine/i386-unix/libwine.so.1 ] || [ -e $WINE_PATH/lib64/wine/x86_64-unix/libwine.so.1 ]; then
		mv $WINE_PATH/lib/wine/i386-windows/shell32.dll $WINE_PATH/lib/wine/i386-windows/shell32-bak.dll &>/dev/null
		mv $WINE_PATH/lib/wine/x86_64-windows/shell32.dll $WINE_PATH/lib/wine/x86_64-windows/shell32-bak.dll &>/dev/null
		mv $WINE_PATH/lib64/wine/x86_64-windows/shell32.dll $WINE_PATH/lib64/wine/x86_64-windows/shell32-bak.dll &>/dev/null
		mv $WINE_PATH/lib64/wine/i386-windows/shell32.dll $WINE_PATH/lib64/wine/i386-windows/shell32-bak.dll &>/dev/null
	else
		rm -rf $WINE_PATH/lib/wine/i386-unix/shell32.dll.so &>/dev/null
		rm -rf $WINE_PATH/lib/wine/x86_64-unix/shell32.dll.so &>/dev/null
		rm -rf $WINE_PATH/lib64/wine/x86_64-unix/shell32.dll.so &>/dev/null
		rm -rf $WINE_PATH/lib64/wine/i386-unix/shell32.dll.so &>/dev/null
	fi
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
else
    if [ -f "$DXVK_FILE_64" ]; then
        unzip_file "$DXVK_FILE_64" "$WINE_PATH/.wine/drive_c" &>/dev/null
    elif [ ! -f "$DXVK_FILE_64" ]; then
        if [[ "$DXVK_WOW" == dxvk*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\dxvk-async-1.10.3.bat" &>/dev/null
        elif [[ "$DXVK_WOW" == wined*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\wined3d-8.0.2.bat" &>/dev/null
        fi
    fi
    if [ -f "$TURNIP_FILE_64" ]; then
        unzip_file "$TURNIP_FILE_64" "$PREFIX/glibc" &>/dev/null
    elif [ ! -f "$TURNIP_FILE_64" ]; then
        if [[ "$TURNIP_WOW" == turnip*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\turnip-v6.5.bat" &>/dev/null
        elif [[ "$TURNIP_WOW" == virgl*.WEG ]]; then
			DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\virgl-mesa-18.bat" &>/dev/null
        fi
    fi
fi
if ! ls $PREFIX/glibc/opt/prefix/start/Registry/2.* &>/dev/null; then
	cp -r $PREFIX/glibc/opt/prefix/start/Registry/2.* $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Registry
fi
rm -rf "$WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start Menu/Install/media foundation (for RE)"
if [ ! -e "$WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start Menu/Install/media foundation (for RE).lnk" ]; then
	cp "$PREFIX/glibc/opt/prefix/start/Install/media foundation (for RE).lnk" "$WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start Menu/Install"
fi
rm -rf $PREFIX/glibc/opt/prefix/start-default
rm -d $PREFIX/glibc/opt/prefix/start/Install/1.* &>/dev/null
rm -d $PREFIX/glibc/opt/prefix/start/Install/2.* &>/dev/null
rm -d $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/1.* &>/dev/null
rm -d $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/2.* &>/dev/null
if ls $PREFIX/glibc/opt/prefix/start/Install/1.* &>/dev/null && ls $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/1.* &>/dev/null; then
	rm -rf $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/1.*/* &>/dev/null
	cp $PREFIX/glibc/opt/prefix/start/Install/1.*/* $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/1.* &>/dev/null
fi
if ls $PREFIX/glibc/opt/prefix/start/Install/2.* &>/dev/null && ls $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/2.* &>/dev/null; then
	rm -rf $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/2.*/* &>/dev/null
	cp $PREFIX/glibc/opt/prefix/start/Install/2.*/* $WINEPREFIX/drive_c/ProgramData/Microsoft/Windows/Start\ Menu/Install/2.* &>/dev/null
fi
mkdir -p $WINEPREFIX/W-Box-meta
if [ ! -f $WINEPREFIX/W-Box-meta/services-fix-applied ]; then
echo "\033[92mПрименение\033[0m \033[36mфункций исправления\033[0m"
	taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine regedit $PREFIX/glibc/opt/prefix/fix-services.reg &>/dev/null
	sleep 5
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	touch $WINEPREFIX/W-Box-meta/services-fix-applied
fi
if [ ! -f $WINEPREFIX/W-Box-meta/fonts-fix-applied ]; then
echo "\033[92mПрименение\033[0m \033[36mисправления шрифтов\033[0m"
	tar -xf $PREFIX/glibc/opt/prefix/fix-fonts.tar.xz -C $WINEPREFIX/drive_c/windows
	touch $WINEPREFIX/W-Box-meta/fonts-fix-applied
fi
if [ ! -f $WINEPREFIX/W-Box-meta/dxdlls-fix-applied ]; then
echo "\033[92mПрименение\033[0m \033[36mисправления DLL\033[0m"	7z x $PREFIX/glibc/opt/prefix/directx.7z -o$WINEPREFIX/drive_c -y &>/dev/null
	taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine regedit $PREFIX/glibc/opt/prefix/user.reg &>/dev/null
	sleep 5
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	touch $WINEPREFIX/W-Box-meta/dxdlls-fix-applied
fi

}
#                Создание контейнера WINE
######################################################
function load_wine_container(){
export_display

load_configs
ln -sf $(df -H | grep -o "/storage/....-....") "$WINEPREFIX/dosdevices/f:" &>/dev/null

#DISPLAY=:1 taskset -c $SECONDARY_WOW $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,$RESOLUTION_WOW start /min /unix $PREFIX/glibc/bin/ib.exe &>/dev/null &
DISPLAY=:0 LC_ALL=$LANG_BOX taskset -c 0,1,2,3,4,5,6 $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer "$HOME/Desktop/$GAME" &>$LOG_PATH 2>&1 &
#DISPLAY=:0 taskset -c $SECONDARY_WOW $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,$RESOLUTION_WOW start /min /unix $PREFIX/glibc/opt/apps/f5taskmgr.exe &>/dev/null &
if [ "$STARTUP_WINEDEVICE_MODE" = "0" ]; then
	$GLIBC_BIN/box64 $GLIBC_BIN/wine taskkill /f /im services.exe &>/dev/null &
fi

if ps aux | grep -v grep | grep -q "wine"
then
sleep 10
pkill feh &>/dev/null &
fi
sleep 1
if [ $DXVK_x64 != $DXVK_WOW ]; then
DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\d3d && start Z:\\usr\\glibc\\opt\\prefix\\d3d\\"${DXVK_WOW%.*}".bat" &>/dev/null
sed -i "45s/.*/DXVK_x64=$DXVK_WOW/" "$hom_64"
fi
if [ $TURNIP_x64 != $TURNIP_WOW ]; then
DISPLAY=:0 taskset -c $PRIMARY_CORES $GLIBC_BIN/box64 $GLIBC_BIN/wine explorer /desktop=shell,640x480 cmd /c "cd Z:\\usr\\glibc\\opt\\prefix\\mesa && start Z:\\usr\\glibc\\opt\\prefix\\mesa\\"${TURNIP_WOW%.*}".bat" &>/dev/null
sed -i "46s/.*/TURNIP_x64=$TURNIP_WOW/" "$hom_64"
fi
REBOOT=0
LAST_SERVICES_WOW=${LAST_SERVICES_WOW:-1}
GAME_SHORT="${GAME%.lnk}"

while true; do
strech="Изображение по ширине экрана $STRETCH_WOW"
wer=$(dialog --title "${GAME}" --default-item "$LAST_SERVICES_WOW" --menu \
"\n
Настройки W-Box\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_n_wow\n
$dxvk_n_wow\n
$box_n_wow\n
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n
$turnip_wow\n
$dxvk_wow\n
$box_wow\n
$version_wow\n
$limit_DX\n
$resolution\n
$strech\n
$cores\n
$limit_fps\n
$dri_3\n
$servic\n" 28 45 4 \
    "1" "Завершить работу ${GAME_SHORT}" \
    "2" "Перезапустить ${GAME_SHORT}" \
    "3" "Растянуть по ширине экрана" \
    "4" "Стандартное разрешение экрана" 2>&1 >/dev/tty)
case $? in
    1) source "$HOME/.shortcuts/,/W-Box" & ;;
esac  
LAST_SERVICES_WOW=$wer
case $wer in
    1) 
        $GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null &
        break
        ;;
    2) 
		$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
		break & exec bash -c ". \"$HOME/.shortcuts/,/W-Box\""
        ;;
    3) 
        STRETCH_WOW="Растянуто"
        source "$HOME/.shortcuts/,/W-Box" &
        termux-x11-preference displayStretch:true
        sed -i "83s/.*/STRETCH_WOW_eng=\"Stretched\"/" "$hom_64"
        sed -i "37s/.*/STRETCH_WOW=\"Растянуто\"/" "$hom_64"
        sed -i '36s/.*/displayStretch=true/' "$hom_64"
        ;;
    4)  
        STRETCH_WOW="Не растянуто"
        source "$HOME/.shortcuts/,/W-Box" &
        termux-x11-preference displayStretch:false
        sed -i "83s/.*/STRETCH_WOW_eng=\"Not stretched\"/" "$hom_64"
        sed -i "37s/.*/STRETCH_WOW=\"Не растянуто\"/" "$hom_64"
        sed -i '36s/.*/displayStretch=false/' "$hom_64"
        ;;
esac
if [ -e $PREFIX/glibc/opt/shutdown ]; then
	rm -rf $PREFIX/glibc/opt/shutdown
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	break
fi
if [ -e $PREFIX/glibc/opt/reboot ]; then
	rm -rf $PREFIX/glibc/opt/reboot
	$GLIBC_BIN/box64 $GLIBC_BIN/wineserver -k &>/dev/null
	REBOOT=1
	break
fi
done
am broadcast -a com.termux.x11.ACTION_STOP -p com.termux.x11 &>/dev/null
export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so
pkill -f inotifywait &>/dev/null
pkill -f Xnoimage-dex2oat &>/dev/null
stop_all
if [ "$REBOOT" = "1" ]; then
	exec $0
fi
}
#                Запуск контейнера WINE
######################################################





######################################################
function run_game(){

stop_all
pulseaudio_x11
location_file_conf
load_configs
export_display
#show_splash
openbox &
auto_run_ib
OpenGL_WOW_eng_func
check_load_file
change_render
( link_creator &>/dev/null ) &
delete_link
dxvk_reconfig
install_box64
create_wine_container
load_wine_container

}
#                   
######################################################
}
#               Запуск - если WINE не запущен
######################################################
    fi
######################################################
    }
#               Проверка работы wine
######################################################
check_running_wine "winhandler.lnk"
load_sys
run_game



